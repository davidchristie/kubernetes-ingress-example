name: Test

on: [push]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: Download and install minikube to /usr/local/bin
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 \
            && sudo install minikube-linux-amd64 /usr/local/bin/minikube

      - name: Verify system has virtualization support enabled
        run: egrep -q 'vmx|svm' /proc/cpuinfo && echo yes || echo no 

        # If you are running within a VM, your hypervisor does not allow nested virtualization.
        # You will need to use the None (bare-metal) driver.
        # The none driver requires minikube to be run as root, until #3760 can be addressed.
        # https://minikube.sigs.k8s.io/docs/start/linux/
      - name: Start minikube and create a cluster
        env:
          # To use kubectl or minikube commands as your own user, you may need to relocate them.
          # This can also be done automatically by setting the env var CHANGE_MINIKUBE_NONE_USER=true
          CHANGE_MINIKUBE_NONE_USER: "true"
        run: |
          # https://github.com/kubernetes/minikube/issues/3323#issuecomment-472916946
          sudo -E minikube start --vm-driver=none --kubernetes-version v1.16.2 --extra-config kubeadm.ignore-preflight-errors=SystemVerification
      
      - name: List all pods in the cluster
        run: kubectl get pods -A

      - name: Enable the NGINX ingress controller
        run: sudo minikube addons enable ingress

      - name: Deploy web service
        run: |
          kubectl run web --image=gcr.io/google-samples/hello-app:1.0 --port=8080
          kubectl expose deployment web --target-port=8080 --type=NodePort

      - name: Deploy web2 service
        run: |
          kubectl run web2 --image=gcr.io/google-samples/hello-app:2.0 --port=8080
          kubectl expose deployment web2 --target-port=8080 --type=NodePort

      - name: Create the ingress resource
        run: kubectl apply -f example-ingress.yml

      - name: Verify web service is reachable
        run: |
          set +e
          export ip=$(sudo minikube ip)
          echo "minikube IP: $ip"
          until $(curl --fail --head --header "Host: hello-world.info" --output /dev/null --silent $ip); do
            echo "..."
            sleep 5
          done
          curl --header "Host: hello-world.info" $ip
        timeout-minutes: 5

      - name: Verify web2 service is reachable
        run: |
          set +e
          export ip=$(sudo minikube ip)
          echo "minikube IP: $ip"
          until $(curl --fail --head --header "Host: hello-world.info" --output /dev/null --silent $ip/v2); do
            echo "..."
            sleep 5
          done
          curl --header "Host: hello-world.info" $ip/v2
        timeout-minutes: 5

        # TLS/HTTPS
        # Resources:
        # - https://kubernetes.github.io/ingress-nginx/user-guide/tls/
        # - https://docs.cert-manager.io/en/latest/getting-started/install/kubernetes.html
        # - https://docs.cert-manager.io/en/latest/tasks/issuers/setup-ca.html

      - name: Create a namespace to run cert-manager in
        run: kubectl create namespace cert-manager

      - name: Install the CustomResourceDefinitions and cert-manager
        run: kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v0.11.0/cert-manager.yaml

      - name: Create self signing issuer resource
        run: kubectl apply -f selfsigning-issuer.yml
